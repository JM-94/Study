redFrom=0, redTo=500,
width=400, height=300))
plot(gauge3)
gla <- givsGeochart(Exports,
locationvar ='county',
colorvar ='Profit')
plot(gla)
str(Exports)
gla <- givsGeochart(Exports,
locationvar ='county',
colorvar ='Profit')
gla <- gvisGeochart(Exports,
locationvar ='county',
colorvar ='Profit')
gla <- gvisGeoChart(Exports,
locationvar ='county',
colorvar ='Profit')
gla <- gvisGeoChart(Exports,
locationvar ='County',
colorvar ='Profit')
gla <- gvisGeoChart(Exports,
locationvar ='Country',
colorvar ='Profit')
plot(gla)
glb <- gvisGeoChart(Exports,
locationvar ='Country',
colorvar ='Profit',
options = list(projection='kavrayskiy-vii'))
plot(glb)
plot(gla)
plot(glb)
city <- c('Seoul', 'Daegu', 'Busan', 'Gwangju')
val <- c(12, 8, 10, 6)
kor <- data.frame(city, val)
kor
g3b <- gvisGeoChart(kor, 'city','val',
options = list(region='KR',
displayMode='regions',
resolution='provinces',
width=600, height=400))
plot(g3b)
# 미국 각 주의 문맹률
library(datasets)
# 미국 각 주의 문맹률
library(datasets)
states <- data.frame(state.name, state.x77)
gStates <- gvisGeoChart(states, 'state.name', 'Illiteracy',
options=list(region='US',
displayMode='regions',
resolution='provinces',
width=600, height=400))
plot(gStates)
# 지진정보
library(readxl)
str(eq)
# 지진정보
library(readxl)
eq <- read.csv('http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/2.5_week.csv')
str(eq)
eq$loc = paste(eq$latitude, eq)
str(eq)
# 지진정보
library(readxl)
eq <- read.csv('http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/2.5_week.csv')
str(eq)
eq$loc = paste(eq$latitude, eq$longitude, sep=';')
eq$loc
g3 <- gvisGeoChart(list(gvis.editor='EQ',
width='800', height='600',
displayMode='Markers',
colorAxis="{color:['purple','red','orange','gray']}",
backgroundColor='lightblue'),chartid = 'EQ')
plot(g3)
str(eq)
g3 <- gvisGeoChart(list(gvis.editor='EQ',
width='800', height='600',
displayMode='Markers',
colorAxis="{color:['purple','red','orange','gray']}",
backgroundColor='lightblue'),chartid = 'EQ')
plot(g3)
g3 <- gvisGeoChart(eq, 'loc', 'depth', 'mag',
options = list(gvis.editor='EQ',
width='800', height='600',
displayMode='Markers',
colorAxis="{color:['purple','red','orange','gray']}",
backgroundColor='lightblue'),chartid = 'EQ')
plot(g3)
# 지진정보
library(readxl)
eq <- read.csv('http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/2.5_week.csv')
str(eq)
eq$loc = paste(eq$latitude, eq$longitude, sep=';')
eq$loc
str(eq)
g3 <- gvisGeoChart(eq, 'loc', 'depth', 'mag',
options = list(gvis.editor='EQ',
width='800', height='600',
displayMode='Markers',
colorAxis="{color:['purple','red','orange','gray']}",
backgroundColor='lightblue'),chartid = 'EQ')
plot(g3)
plot(g3)
library(devtools)
install.packages("devtools")
install_github('dkahle/ggmap')
install_github('dkahle/ggmap')
install_github('dkahle/ggmap')
install_github('dkahle/ggmap')
install.packages("ggmap")
# install_github('dkahle/ggmap')
library(ggmap)
library(devtools)
apikey = 'AIzaSyALS-1jL0Er7swyhrCbzxnAlMm1rhwgc6A'
register_google(apikey)
ggDaegu <- get_googlemap('daegu',maptype='hybrid')
ggmap(ggDaegu)
ggSeoul <- get_googlemap('seoul',maptype='hybrid')
ggmap(ggSeoul)
ggBusan <- get_googlemap('busan',maptype='hybrid')
ggmap(ggBusan)
ggNewYork <- get_googlemap('NewYork',maptype='hybrid')
ggmap(ggNewYork)
ggCarliniBase <- get_googlemap('CarliniBase',maptype='hybrid')
ggmap(ggCarliniBase)
ggKingSejongStation <- get_googlemap('KingSejongStation',maptype='hybrid')
ggmap(ggKingSejongStation)
ggGrumant <- get_googlemap('Grumant',maptype='hybrid')
ggmap(ggGrumant)
library(ggplot2)
str(diamonds)
dia <- lm(price~carat, data=diamonds) #[종속변수:price~독립변수:carat,모집단]
# lm:회귀분석 함수, 결과 (Intercept 절편:-2256, carat 기울기:7756)
#                   -> carat이 증가할 수록 가격 증가한다.
View(diamonds)
dia
#잔차 : 예상치와 실제 관측치의 차이
#1. 잔차분포 그래프:y축을 0을 기준으로 고르게 분포하는게 좋음.
#2. 정규화 관련:해당 점선에 잔차들이 놓여있으면 정규성을 만족.
#3. 잔차를 표준화해서 제곱:x축은 선형회귀로 예측된 관측치, y측은 표준화 잔차
#   기울기가 0인 직선형태, 점들도 고르게 분포가 좋음.
#4. 영향점 판별 그래프 x축 : Leverage, Y축: 표준화된 잔차
#                      x축 : 변수가 얼마나 벗어나있는지 의미
# outlier : 주어진 회귀모델에서 잘 설명되지 않는 데이터
summary(dia)
par(mfrow=c(2,2))
plot(dia)
library(car)
outlierTest(dia) #이상치값
#다중회귀분석
#종속변수1개, 독립변수가 2개 이상인 회귀분석
#ex) 맛집(종속변수), 음식맛, 분위기, 청결, 가격, 위치..
library(readxl)
csvIns <- read.csv('res/insurance.csv')
#범주형(분류목적) : sex, smoker, region [수치가 아니기에 최대/최소 안나옴]
#수치형(일정기간, 연속적인 수치) : age, bmi, children, charges
summary(csvIns)
hist(csvIns$charges)
hist(csvIns$bmi)
table(csvIns$region)#범주형을 보기에 좋음.
#psych 라이브러리
library(psych)
scaMatrix <- csvIns[c("age","bmi","children","charges")]
#기존의 산점모 매트릭스보다 잘 되어 있음
pairs.panels(scaMatrix)
# -1 ~ +1
cor(scaMatrix)
lmins <- lm(charges ~ age+children+bmi+sex+smoker+region,data=csvIns)
lmins
scaMatrix <- csvIns[c("age","bmi","children","charges")]
library(car)
install.packages("psych")
install.packages("readxl")
readxl
#다중회귀분석
#종속변수1개, 독립변수가 2개 이상인 회귀분석
#ex) 맛집(종속변수), 음식맛, 분위기, 청결, 가격, 위치..
library(readxl)
csvIns <- read.csv('res/insurance.csv')
#범주형(분류목적) : sex, smoker, region [수치가 아니기에 최대/최소 안나옴]
#수치형(일정기간, 연속적인 수치) : age, bmi, children, charges
summary(csvIns)
hist(csvIns$charges)
hist(csvIns$bmi)
table(csvIns$region)#범주형을 보기에 좋음.
#psych 라이브러리
library(psych)
scaMatrix <- csvIns[c("age","bmi","children","charges")]
# -1 ~ +1
cor(scaMatrix)
lmins <- lm(charges ~ age+children+bmi+sex+smoker+
region,data=csvIns)
lmins
library(devtools)
library(ggmap)
apikey = 'AIzaSyALS-1jL0Er7swyhrCbzxnAlMm1rhwgc6A'
register_google(apikey)
ggDaegu <- get_googlemap('daegu', maptype='hybrid')
ggmap(ggDaegu)
library(ggplot2)
library(dplyr)
finaName <- "구미역"
geoCode <- enc2utf8(finaName) %>% geoCode()
geoCode <- enc2utf8(findName) %>% geoCode()
library(dplyr)
library(ggplot2)
finaName <- "구미역"
geoCode <- enc2utf8(findName) %>% geocode()
geocode <- as.numeric(geoCode)
finaName <- "구미역"
geoCode <- enc2utf8(findName) %>% geocode()
geoData <- as.numeric(geoCode)
get_googlemap(center = geoData, maptype = "roadmap, zoom=17") %>% ggmap() +
geom_point(data=geoCode, aes(x=lon, y=lat), size=4, alpha=0.9, col="red")
findName <- "구미역"
geoCode <- enc2utf8(findName) %>% geocode()
geoData <- as.numeric(geoCode)
get_googlemap(center = geoData, maptype = "roadmap, zoom=17") %>% ggmap() +
geom_point(data=geoCode, aes(x=lon, y=lat), size=4, alpha=0.9, col="red")
get_googlemap(center = geoData, maptype = "hybrid", zoom=17) %>% ggmap() +
geom_point(data=geoCode, aes(x=lon, y=lat), size=4, alpha=0.9, col="red")
findName <- "동대구역"
geoCode <- enc2utf8(findName) %>% geocode()
geoData <- as.numeric(geoCode)
get_googlemap(center = geoData, maptype = "hybrid", zoom=17) %>% ggmap() +
geom_point(data=geoCode, aes(x=lon, y=lat), size=4, alpha=0.9, col="red")
library(readxl)
library(stringr)
pop2019 <- read.csv(file.choose(), header = T)
pop2019
region <- pop2019$"지역명"
pop2019
pop2019 <- read.csv(file.choose(), header = T)
pop2019
region <- pop2019$"지역명"
lon <- region$LON
lat <- region$LAT
totPop2019 <- as.numeric(str_replace_all(pop2019$"총인구수",",",""))
lon <- pop2019$LON
lat <- pop2019$LAT
totPop2019 <- as.numeric(str_replace_all(pop2019$"총인구수",",",""))
popDf <- data.frame(region, lon, lat, totPop2019)
popDf
View(popDf)
popDf - popDf[1:17, ]
popDf <- popDf[1:17, ]
popDf
# 정적 지도 이미지
baseMap <- c(left=123.4423013, bottom=32.8528306,
right=131.601445, top=38.8714354)
map <- get_stamenmap(baseMap, zoom = 7, maptype = 'watercolor')
layer1 <- ggmap(map)
layer1
# 텍스트 추가
layer3 <- layer2 + geom_text(data = popDf, aes(x=lon+0.001, y=lat+0.08, label=region), size=3)
layer3
# 포인트 추가
layer2 <- layer1 + geom_point(data=popDf, aes(x=lon, y=lat, color=factor(totPop2019),
size=factor(totPop2019)))
layer2
# 텍스트 추가
layer3 <- layer2 + geom_text(data = popDf, aes(x=lon+0.001, y=lat+0.08, label=region), size=3)
layer3
libra
install.packages("XML")
library(XML)
library(ggplot2)
api <- "http://apis.data.go.kr/B552584/ArpltnInforInqireSvc/getMinuDustFrcstDspth"
apikey <- 2SeuYMWYdxsLIy4uYI%2FnPK3SHArlIpjqQ7B4vlnEm0PiIBmznlriKbVOyoYRwS21G3H0DgS%2BQxBcRhrRUa8uxQ%3D%3D
apikey <- "2SeuYMWYdxsLIy4uYI%2FnPK3SHArlIpjqQ7B4vlnEm0PiIBmznlriKbVOyoYRwS21G3H0DgS%2BQxBcRhrRUa8uxQ%3D%3D"
library(XML)
library(ggplot2)
api <- "http://apis.data.go.kr/B552584/ArpltnInforInqireSvc/getMinuDustFrcstDspth"
apikey <- "2SeuYMWYdxsLIy4uYI%2FnPK3SHArlIpjqQ7B4vlnEm0PiIBmznlriKbVOyoYRwS21G3H0DgS%2BQxBcRhrRUa8uxQ%3D%3D"
returnType < xml
numOfRows <- 100
pageNo <- 1
InformCode <- PM25
url <- paste(api, "?serviceKey=", apikey, "&returnType=", returnType,
"&numOfRows=", numOfRows, "&pageNo=", pageNo, "&InformCode=", InformCode)
returnType < "xml"
numOfRows <- 100
pageNo <- 1
InformCode <- PM25
library(XML)
library(ggplot2)
api <- "http://apis.data.go.kr/B552584/ArpltnInforInqireSvc/getMinuDustFrcstDspth"
apikey <- "2SeuYMWYdxsLIy4uYI%2FnPK3SHArlIpjqQ7B4vlnEm0PiIBmznlriKbVOyoYRwS21G3H0DgS%2BQxBcRhrRUa8uxQ%3D%3D"
returnType < "xml"
numOfRows <- 100
pageNo <- 1
InformCode <- PM25
url <- paste(api, "?serviceKey=", apikey, "&returnType=", returnType,
"&numOfRows=", numOfRows, "&pageNo=", pageNo, "&InformCode=", InformCode, sep = "")
InformCode <- "PM25"
returnType < "xml"
library(XML)
library(ggplot2)
api <- "http://apis.data.go.kr/B552584/ArpltnInforInqireSvc/getMinuDustFrcstDspth"
apikey <- "2SeuYMWYdxsLIy4uYI%2FnPK3SHArlIpjqQ7B4vlnEm0PiIBmznlriKbVOyoYRwS21G3H0DgS%2BQxBcRhrRUa8uxQ%3D%3D"
returnType <- "xml"
numOfRows <- 100
pageNo <- 1
InformCode <- "PM25"
url <- paste(api, "?serviceKey=", apikey, "&returnType=", returnType,
"&numOfRows=", numOfRows, "&pageNo=", pageNo, "&InformCode=", InformCode, sep = "")
url
xmlFile <- xmlParse(url)
xmlRoot(xmlFile)
df <- xmlToDataFrame(getNodeSet(xmlFile, ""))
df <- xmlToDataFrame(getNodeSet(xmlFile, "//items/item"))
df
ggplot(data=df, aes(x=dataTime, y=InformCode))+
geom_bar(stat = "identity", fill="green")+
# x축 눈금 라벨 회전
theme(axis.text.x = element_text(angle=90))+
labs(title = "")
ggplot(data=df, aes(x=dataTime, y=InformCode))+
geom_bar(stat = "identity", fill="green")+
# x축 눈금 라벨 회전
theme(axis.text.x = element_text(angle=90))+
labs(title = "대기질 예보통보 조회")
ggplot(data=df, aes(x=dataTime, y=InformCode))+
geom_bar(stat = "identity", fill="green")+
# x축 눈금 라벨 회전
theme(axis.text.x = element_text(angle=90))+
labs(title = "대기질 예보통보 조회", x="통보날짜", y="통보코드드")
ggplot(data=df, aes(x=dataTime, y=InformCode, fill=InformCode))+
geom_bar(stat = "identity", fill="green")+
# x축 눈금 라벨 회전
theme(axis.text.x = element_text(angle=90))+
labs(title = "대기질 예보통보 조회", x="통보날짜", y="통보코코드")
ggplot(data=df, aes(x=dataTime, y=InformCode, fill=InformCode))+
geom_bar(stat = "identity", fill="green")+
# x축 눈금 라벨 회전
theme(axis.text.x = element_text(angle=90))+
labs(title = "대기질 예보통보 조회", x="통보날짜", y="통보코코드") +
scale_fill_manual(values = rainbow(10))
ggplot(data=df, aes(x=dataTime, y=InformCode, fill=InformCode))+
geom_bar(stat = "identity")+
# x축 눈금 라벨 90도 회전
theme(axis.text.x = element_text(angle=90))+
labs(title = "대기질 예보통보 조회", x="통보날짜", y="통보코코드") +
scale_fill_manual(values = rainbow(10))
ggplot(data=df, aes(x=dataTime, y=InformCode, fill=InformCode))+
geom_bar(stat = "identity")+
# x축 눈금 라벨 90도 회전
theme(axis.text.x = element_text(angle=90))+
labs(title = "대기질 예보통보 조회", x="통보날짜", y="통보코코드") +
scale_fill_manual(values = rainbow(7)) +
coord_flip()
InformCode <- "PM10"
url <- paste(api, "?serviceKey=", apikey, "&returnType=", returnType,
"&numOfRows=", numOfRows, "&pageNo=", pageNo, "&InformCode=", InformCode, sep = "")
url
xmlFile <- xmlParse(url)
xmlRoot(xmlFile)
df <- xmlToDataFrame(getNodeSet(xmlFile, "//items/item"))
df
ggplot(data=df, aes(x=dataTime, y=InformCode, fill=InformCode))+
geom_bar(stat = "identity")+
# x축 눈금 라벨 90도 회전
theme(axis.text.x = element_text(angle=90))+
labs(title = "대기질 예보통보 조회", x="통보날짜", y="통보코코드") +
scale_fill_manual(values = rainbow(7)) +
coord_flip()
api <- "http://apis.data.go.kr/B552584/ArpltnInforInqireSvc/getMinuDustFrcstDspth"
apikey <- "2SeuYMWYdxsLIy4uYI%2FnPK3SHArlIpjqQ7B4vlnEm0PiIBmznlriKbVOyoYRwS21G3H0DgS%2BQxBcRhrRUa8uxQ%3D%3D"
returnType <- "xml"
numOfRows <- 100
pageNo <- 1
InformCode <- "PM10"
url <- paste(api, "?serviceKey=", apikey,
"&returnType=", returnType,
"&numOfRows=", numOfRows,
"&pageNo=", pageNo,
"&InformCode=", InformCode,
sep = "")
url
xmlFile <- xmlParse(url)
xmlRoot(xmlFile)
df <- xmlToDataFrame(getNodeSet(xmlFile, "//items/item"))
df
ggplot(data=df, aes(x=dataTime, y=informCode))+
geom_bar(stat = "identity", fill="green")+
# x축 눈금 라벨 90도 회전
theme(axis.text.x = element_text(angle=90))+
labs(title = "대기질 예보통보 조회", x="통보날짜", y="통보코코드")
ggplot(data=df, aes(x=dataTime, y=informCode, fill=InformCode))+
geom_bar(stat = "identity")+
# x축 눈금 라벨 90도 회전
theme(axis.text.x = element_text(angle=90))+
labs(title = "대기질 예보통보 조회", x="통보날짜", y="통보코코드") +
scale_fill_manual(values = rainbow(10))
ggplot(data=df, aes(x=dataTime, y=informCode, fill=InformCode))+
geom_bar(stat = "identity")+
# x축 눈금 라벨 90도 회전
theme(axis.text.x = element_text(angle=90))+
labs(title = "대기질 예보통보 조회", x="통보날짜", y="통보코코드") +
scale_fill_manual(values = rainbow(7)) +
coord_flip()
ggplot(data=df, aes(x=dataTime, y=informCode))+
geom_bar(stat = "identity", fill="green")+
# x축 눈금 라벨 90도 회전
theme(axis.text.x = element_text(angle=90))+
labs(title = "대기질 예보통보 조회", x="통보날짜", y="통보코코드")
ggplot(data=df, aes(x=dataTime, y=informCode, fill=InformCode))+
geom_bar(stat = "identity")+
# x축 눈금 라벨 90도 회전
theme(axis.text.x = element_text(angle=90))+
labs(title = "대기질 예보통보 조회", x="통보날짜", y="통보코코드") +
scale_fill_manual(values = rainbow(10))
ggplot(data=df, aes(x=dataTime, y=informCode, fill=InformCode))+
geom_bar(stat = "identity")+
# x축 눈금 라벨 90도 회전
theme(axis.text.x = element_text(angle=90))+
labs(title = "대기질 예보통보 조회", x="통보날짜", y="통보코코드") +
scale_fill_manual(values = rainbow(7)) +
coord_flip()
ggplot(data=df, aes(x=dataTime, y=informCode, fill=informCode))+
geom_bar(stat = "identity")+
# x축 눈금 라벨 90도 회전
theme(axis.text.x = element_text(angle=90))+
labs(title = "대기질 예보통보 조회", x="통보날짜", y="통보코코드") +
scale_fill_manual(values = rainbow(10))
ggplot(data=df, aes(x=dataTime, y=informCode, fill=informCode))+
geom_bar(stat = "identity")+
# x축 눈금 라벨 90도 회전
theme(axis.text.x = element_text(angle=90))+
labs(title = "대기질 예보통보 조회", x="통보날짜", y="통보코코드") +
scale_fill_manual(values = rainbow(7)) +
coord_flip()
library(jsonlite)
library(ggplot2)
api <- "http://apis.data.go.kr/B552584/ArpltnInforInqireSvc/getMinuDustFrcstDspth"
apikey <- "2SeuYMWYdxsLIy4uYI%2FnPK3SHArlIpjqQ7B4vlnEm0PiIBmznlriKbVOyoYRwS21G3H0DgS%2BQxBcRhrRUa8uxQ%3D%3D"
returnType <- "json"
numOfRows <- 100
pageNo <- 1
InformCode <- "PM10"
url <- paste(api, "?serviceKey=", apikey,
"&returnType=", returnType,
"&numOfRows=", numOfRows,
"&pageNo=", pageNo,
"&InformCode=", InformCode,
sep = "")
url
library(jsonlite)
library(ggplot2)
api <- "http://apis.data.go.kr/B552584/ArpltnInforInqireSvc/getMinuDustFrcstDspth"
apikey <- "2SeuYMWYdxsLIy4uYI%2FnPK3SHArlIpjqQ7B4vlnEm0PiIBmznlriKbVOyoYRwS21G3H0DgS%2BQxBcRhrRUa8uxQ%3D%3D"
returnType <- "json"
numOfRows <- 100
pageNo <- 1
InformCode <- "PM10"
url <- paste(api, "?serviceKey=", apikey,
"&returnType=", returnType,
"&numOfRows=", numOfRows,
"&pageNo=", pageNo,
"&InformCode=", InformCode,
sep = "")
url
jsonData <- fromJSON(url)
str(jsonData)
df <- data.frame(jsonData$response$body$items$informCode,
jsonData$response$body$items$dataTime)
df
ggplot(data=df, aes(x=dataTime, y=informCode))+
geom_bar(stat = "identity", fill="green")
library(jsonlite)
library(ggplot2)
api <- "http://apis.data.go.kr/B552584/ArpltnInforInqireSvc/getMinuDustFrcstDspth"
apikey <- "2SeuYMWYdxsLIy4uYI%2FnPK3SHArlIpjqQ7B4vlnEm0PiIBmznlriKbVOyoYRwS21G3H0DgS%2BQxBcRhrRUa8uxQ%3D%3D"
returnType <- "json"
numOfRows <- 100
pageNo <- 1
InformCode <- "PM10"
url <- paste(api, "?serviceKey=", apikey,
"&returnType=", returnType,
"&numOfRows=", numOfRows,
"&pageNo=", pageNo,
"&InformCode=", InformCode,
sep = "")
url
jsonData <- fromJSON(url)
str(jsonData)
df <- data.frame(jsonData$response$body$items$informCode,
jsonData$response$body$items$dataTime)
df
ggplot(data=df, aes(x=dataTime, y=informCode))+
geom_bar(stat = "identity", fill="green")
library(KoNLP)
library(wordcloud2)
install.packages(KoNLP)
useNIAdic()
KoNLP
install.packages("Sejong")
install.packages("hash")
install.packages("rJava")
Sys.setenv(JAVA_HOME="C:\\Program Files\\Java\\jdk1.8.0_102")
install.packages("tau")
install.packages("devtools")
library(KoNLP)
install.packages("multilinguer")
library(multilinguer)
install_jdk()
install.packages(c('stringr', 'hash', 'tau', 'Sejong', 'RSQLite', 'devtools'), type = "binary")
library(KoNLP)
install.packages("C:/Users/KB/Desktop/KoNLP_0.80.2.tar.gz", repos = NULL, type = "source")
library(KoNLP)
install.packages("C:/Users/KB/Desktop/KoNLP_0.80.2.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/KB/Desktop/KoNLP_0.80.2.tar.gz", repos = NULL, type = "source")
library(KoNLP)
